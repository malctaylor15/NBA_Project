gamma_shape <- gamma_params$estimate[1]
gamma_rate <- gamma_params$estimate[2]
gamma_tail_approx <- qgamma(quantiles,shape = gamma_shape, rate = gamma_rate )
gamma_tail <- 1- gamma_tail_approx
# Need to plot on log log
# Plot on log log scale
plot(quantiles,emp_tail, log = "xy", type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'green', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "green", "orange"))
min(log(emp_tail))
sum(is.na(emp_tail))
plot(emp_tail)
log(min(emp_tail))
min(emp_tail)
log(-1)
plot(empirical_tail)
emp_tail <- empirical_tail
emp_tail <- empirical_tail # supposed to be 1-Fsn
norm_tail <- norm_tail_approx
plot(quantiles,emp_tail, log = "xy", type = 'l', col = 'red', lwd = 2)
norm_tail <- norm_tail_approx # Supposed to be 1-Fsn
gamma_tail <- gamma_tail_approx # Supposed to be 1- Fsn
# Need to plot on log log
# Plot on log log scale
plot(quantiles,emp_tail, log = "xy", type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'green', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "green", "orange"))
quantiles <- seq(from = 0.95, to = 0.9999, by = 0.0001)
# Empirical distribution quantiles
empirical_tail <- quantile(Sn_MC_samples, quantiles)
emp_tail <- 1 - empirical_tail
# Normal Approximation
Sn_mean <- mean(Sn_MC_samples)
Sn_sd <- sd(Sn_MC_samples)
norm_tail_approx <- qnorm(quantiles, Sn_mean, Sn_sd)
norm_tail <- 1- norm_tail_approx
# Gamma tail approx ... Equations from the book - pg 477 of pdf
# Or simplified equations on 497 in appendix
# This is not the 3 parameter gamma....
library(MASS)
gamma_params <- fitdistr(Sn_MC_samples, "gamma")
gamma_shape <- gamma_params$estimate[1]
gamma_rate <- gamma_params$estimate[2]
gamma_tail_approx <- qgamma(quantiles,shape = gamma_shape, rate = gamma_rate )
gamma_tail <- 1- gamma_tail_approx
# Need to plot on log log
# Plot on log log scale
# NOT ON LOG LOG SCALE
plot(quantiles,emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'green', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "green", "orange"))
plot(quantiles,emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'blue', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
plot(emp_tail, quantiles, type = 'l', col = 'red', lwd = 2)
lines(norm_tail, quantiles, type = 'l', col = 'blue', lwd = 2)
lines(gamma_tail, quantiles, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
plot(emp_tail, log(quantiles), type = 'l', col = 'red', lwd = 2)
lines(norm_tail, log(quantiles), type = 'l', col = 'blue', lwd = 2)
lines(gamma_tail, log(quantiles), type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
plot(emp_tail, quantiles, log = "y", type = 'l', col = 'red', lwd = 2)
plot(emp_tail, log(quantiles), log = "y", type = 'l', col = 'red', lwd = 2)
plot(emp_tail, quantiles, log = "y", type = 'l', col = 'red', lwd = 2)
plot(emp_tail, quantiles, log = "xy", type = 'l', col = 'red', lwd = 2)
plot(emp_tail, quantiles, type = 'l', col = 'red', lwd = 2)
lines(norm_tail, quantiles, type = 'l', col = 'blue', lwd = 2)
lines(gamma_tail, quantiles, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
qnorm(0.99)
qnorm(0.99)
qnorm(0.01)
exp(0.01)
# Approximating a compound poisson random variable
numb_sn <- 100000 # M
lambda <- 100 # Poisson process parameter
mu = 0.10 # Parameter for X
sigma = 0.4 # Parameter for X
# Begin approximating Sn
# Approximating a compound poisson random variable
numb_sn <- 100000 # M
lambda <- 100 # Poisson process parameter
mu = 0.10 # Parameter for X
sigma = 0.4 # Parameter for X
# Begin approximating Sn
N_vector <- rpois(numb_sn, lambda)
# Compute a sample of Sn
Sn_sample <- function(N, mean = mu, std = sigma){
log_X_k <- rnorm(N, mean = mu, sd = sigma)
X_k <- exp(log_X_k)
Sn <- sum(X_k)
return (Sn)
}
# Pre allocate space
Sn_MC_samples <- rep(0, numb_sn)
# Compute M copies of Sn
for (sample in 1:numb_sn){
N_i <- N_vector[sample]
Sn_MC_samples[sample] <- Sn_sample(N_i, mu, sigma)
}
# Plot the distribution with a normal density overlaid
makeHist <- function(x, color = "blue", title = "Histogram"){
h<-hist(x,breaks = 100 ,main=title)
xfit<-seq(min(x),max(x),length=100)
yfit<-dnorm(xfit,mean=mean(x),sd=sd(x))
yfit <- yfit*diff(h$mids[1:2])*length(x)
lines(xfit, yfit, col=color, lwd=2)
}
makeHist(Sn_MC_samples)
####################### Quantile Stuff #############################
#################################################################
quantiles <- seq(from = 0.95, to = 0.9999, by = 0.0001)
# Empirical distribution quantiles
empirical_tail <- quantile(Sn_MC_samples, quantiles)
emp_tail <- 1 - empirical_tail
# Normal Approximation quantiles
Sn_mean <- mean(Sn_MC_samples)
Sn_sd <- sd(Sn_MC_samples)
norm_tail_approx <- qnorm(quantiles, Sn_mean, Sn_sd)
norm_tail <- 1- norm_tail_approx
# Gamma tail approx ... Equations from the book - pg 477 of pdf
# Or simplified equations on 497 in appendix
# This is not the 3 parameter gamma....
# Find the parameters using MLE in the MASS package
library(MASS)
gamma_params <- fitdistr(Sn_MC_samples, "gamma")
gamma_shape <- gamma_params$estimate[1]
gamma_rate <- gamma_params$estimate[2]
# Compute the quantiles and find the tail distribution
gamma_tail_approx <- qgamma(quantiles,shape = gamma_shape, rate = gamma_rate )
gamma_tail <- 1- gamma_tail_approx
# Plot on log log scale
# NOT ON LOG LOG SCALE
plot(quantiles,emp_tail, type = 'l', col = 'red', lwd = 2)
lines(quantiles, norm_tail, type = 'l', col = 'blue', lwd = 2)
lines(quantiles, gamma_tail, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
# The approximations should not straddle the empirical distribution
# Plotting again to look more like his but same analytical problems
# Switch x and y axis
plot(emp_tail, quantiles, type = 'l', col = 'red', lwd = 2)
lines(norm_tail, quantiles, type = 'l', col = 'blue', lwd = 2)
lines(gamma_tail, quantiles, type = 'l', col = 'orange', lwd = 2)
legend("bottomleft", c("Empirical", "Normal", "Gamma"), lwd = 2, col = c("red", "blue", "orange"))
# Input the data
data <- read.csv("mf850-finalproject-data.csv")
summary(data)
# Seperate the response variable
RETMONTH <- data$RETMONTH
# Histogram for response
hist(RETMONTH, breaks = 60)
# Count how many returns are higher and lower
(re_up <- length(RETMONTH[RETMONTH < 0]))
(re_down <- length(RETMONTH[RETMONTH > 0]))
# Percentage of increases - Baseline
re_up / (re_up + re_down)
# Stop up down as new column vector
up_down <- ifelse(RETMONTH > 0, 1, 0)
# Determine how many unique predictors there are
# Function to measure number of unique elements in column
numb_unique <- function(x) {
uniques <- length(unique(x))
return (uniques)
}
# Apply number of unique function to all columns of the data set
uniqueness <- apply(data, 2, numb_unique)
# Count how many columns have less than 50 unique values (indicating they are categorical)
length(uniqueness[uniqueness < 50])
# Determine which variables should be categorical variables
which(uniqueness < 50)
# Already saw Industry has levels
# Establish plotting points - Last 1000 data points
n <- length(RETMONTH)
n_low <- n - 1000
# Plot last __ data points
plot(RETMONTH[n_low:n], type = "l", col = "red", lwd = 2)
abline(h = mean(RETMONTH[n_low:n]), col = "blue", lwd = 2)
# A priori MSE - squared error from the mean
MSE_i <- (RETMONTH[n_low:n] - mean(RETMONTH[n_low:n])) ^ 2
# MSE
(MSE <- mean(MSE_i))
# Take out industry, date, retmonth variables
industry <- data$Industry
date <- data$Date
data_no_ind <- data
data_no_ind$Industry <- NULL
data_no_ind$Date <- NULL
data_no_ind$RETMONTH <- NULL
# Scale data
data_no_ind <- scale(data_no_ind)
install.packages("quantmod")
library(quantmod)
?getSymbols
spy_data <- getSymbols("SPY", src = "yahoo", from = "2014-01-01", to = "2015-01-01")
head(SPY)
spy_returns <- SPY$SPY.Close
head(spy_returns)
length(SPY$SPY.Close)
numb_returns <- length(SPY$SPY.Close)
spy_returns <- (SPY$SPY.Close[1:(numb_returns - 1)] -SPY$SPY.Close[2:numb_returns])/
SPY$SPY.Close[1:(numb_returns - 1)]
hist(spy_returns)
spy_returns <- as.numeric((SPY$SPY.Close[1:(numb_returns - 1)] -SPY$SPY.Close[2:numb_returns])/
SPY$SPY.Close[1:(numb_returns - 1)])
hist(spy_returns)
head(spy_returns)
numb_returns <- length(SPY$SPY.Close)
spy_returns <- as.numeric((SPY$SPY.Close[1:(numb_returns - 1)] -SPY$SPY.Close[2:numb_returns])/
SPY$SPY.Close[1:(numb_returns - 1)])
head(spy_returns)
spy_returns <- (SPY$SPY.Close[1:(numb_returns - 1)] -SPY$SPY.Close[2:numb_returns])/
SPY$SPY.Close[1:(numb_returns - 1)]
spy_returns <- as.data.frame((SPY$SPY.Close[1:(numb_returns - 1)] -SPY$SPY.Close[2:numb_returns])/
SPY$SPY.Close[1:(numb_returns - 1)])
head(spy_returns)
getSymbols("SPY", src = "yahoo", from = "2014-01-01", to = "2015-01-01")
head(SPY)
numb_returns <- length(SPY$SPY.Close)
spy_returns <- as.data.frame((SPY$SPY.Close[1:(numb_returns - 1)] -SPY$SPY.Close[2:numb_returns])/
SPY$SPY.Close[1:(numb_returns - 1)])
head(spy_returns)
View(spy_returns)
View(spy_returns)
install.packages("quandl")
install.packages("Quandl")
library(Quandl)
getSymbols("SPY", src = "yahoo", from = "2014-01-01", to = "2015-01-01")
getSymbols("SPY", src = "yahoo", from = "2014-01-01")
?getSymbols
getSymbols("SPY")
?Quandl
library(quantmod)
getSymbols("SPY")
getSymbols("SPY", from = "2015-01-01")
getSymbols("SPY", from = "2014-01-01", to = "2015-01-01")
head(SPY$SPY.Close)
numb_returns <- length(SPY$SPY.Close)
spy_returns <- SPY$SPY.Close[1:(numb_returns -1)] - SPY$SPY.Close[2:numb_returns]/(SPY$SPY.Close[1:(numb_returns-1)])
head(spy_returns)
spy_returns <- (SPY$SPY.Close[1:(numb_returns -1)] - SPY$SPY.Close[2:numb_returns])/(SPY$SPY.Close[1:(numb_returns-1)])
head(spy_returns)
spy_returns <- (SPY$SPY.Close[1:(numb_returns -1)] - SPY$SPY.Close[2:numb_returns])/(SPY$SPY.Close[1:(numb_returns-1)])*100
head(spy_returns)
spy_returns <- (SPY$SPY.Close[1:(numb_returns -1)] - SPY$SPY.Close[2:numb_returns])
head(spy_returns)
head(SPY$SPY.Close)
SPY$SPY.Close[1:(numb_returns -1)]
SPY$SPY.Close[1:(numb_returns -1)] - SPY$SPY.Close[2:numb_returns])
/(SPY$SPY.Close[1:(numb_returns-1)])*100
spy_returns <- (SPY$SPY.Close[1:(numb_returns -1)] - SPY$SPY.Close[2:numb_returns])
head(spy_returns)
spy_returns <- diff(log(SPY.Close), lag = 1)
spy_returns <- diff(log(SPY$SPY.Close), lag = 1)
head(spy_returns)
spy_returns <- spy_returns[-1]
hist(SPY$SPY.Close)
hist(SPY$SPY.Close, breaks = 30)
plot(SPY$SPY.Close)
plot(SPY$SPY.Close, col = "red", lwd = 2)
plot(SPY$SPY.Close)
plot(spy_returns)
hist(spy_returns)
hist(spy_returns, breaks = 30)
hist(spy_returns, breaks = 30, prob = T)
ret_dens <-
?density
ret_dens <-
?density
?density
ret_dens <- density(spy_returns)
names(ret_dens)
hist(spy_returns, breaks = 30, prob = T)
hist(spy_returns, breaks = 30, prob = True)
hist(spy_returns, breaks = 30, prob = TRUE)
ret_dens <- density(spy_returns)
lines(ret_dens$x, ret_dens$y, lwd = 2, col = "red")
ret_mean <- mean(spy_returns); ret_sd <- sd(spy_returns)
ret_norm_dens <- dnorm(ret_dens$x, mean = ret_mean, sd = ret_sd)
lines(ret_norm_dens$x, ret_norm_dens$y, col = "blue", lwd = 2)
lines(ret_dens$x, ret_norm_dens$y, col = "blue", lwd = 2)
lines(ret_dens$x, ret_norm_dens, col = "blue", lwd = 2)
?t
?dt
ret_norm <- (spy_returns - ret_mean)/ret_sd
ret_t3_dens <- dt(ret_dens$x, df= 3 )
plot(ret_t3_dens)
hist(SPY$SPY.Close, breaks = 30)
spy_returns <- diff(log(SPY$SPY.Close), lag = 1)
spy_returns <- spy_returns[-1]
plot(spy_returns)
hist(spy_returns, breaks = 30)
hist(spy_returns, breaks = 30, prob = TRUE)
ret_dens <- density(spy_returns)
lines(ret_dens$x, ret_dens$y, lwd = 2, col = "red")
ret_mean <- mean(spy_returns); ret_sd <- sd(spy_returns)
ret_norm_dens <- dnorm(ret_dens$x, mean = ret_mean, sd = ret_sd)
lines(ret_dens$x, ret_norm_dens, col = "blue", lwd = 2)
ret_t3_dens <- dt(ret_dens$x, df= 3 )
lines(ret_dens$x,ret_t3_dens)
summary(ret_dens$x)
?dt
ret_t3_dens_01 <- dt(ret_dens$x, df= 3 )
ret_t3_dens <- ret_t3_dens_01*ret_sd + ret_mean
lines(ret_dens$x,ret_t3_dens)
lines(ret_dens$x,ret_t3_dens_01)
lines(ret_dens$x,ret_t3_dens_01, col = "green")
plot(ret_dens$x,ret_t3_dens_01, col = "green")
lines(ret_dens$x,ret_t3_dens, col = "green")
plot(ret_dens$x,ret_t3_dens, col = "green")
ret_t3_dens <- ret_t3_dens_01*ret_sd + ret_mean
plot(ret_dens$x,ret_t3_dens, col = "green")
summary(ret_dens$x)
summary(ret_norm_dens)
ret_t3_dens_01 <- dt(ret_dens$x, df= 3 )
ret_t3_dens <- ret_t3_dens_01*ret_sd + ret_mean
summary(ret_t3_dens)
dt
ret_t3_dens_01 <- pt(ret_dens$x, df= 3 )
ret_t3_dens <- ret_t3_dens_01*ret_sd + ret_mean
plot(ret_dens$x,ret_t3_dens, col = "green")
ret_t3_dens_01 <- dt(ret_dens$x, df= 3 )
ret_t3_dens <- ret_t3_dens_01*ret_sd + ret_mean
plot(ret_dens$x,ret_t3_dens, col = "green")
hist(SPY$SPY.Close, breaks = 30)
spy_returns <- diff(log(SPY$SPY.Close), lag = 1)
spy_returns <- spy_returns[-1]
plot(spy_returns)
hist(spy_returns, breaks = 30)
hist(spy_returns, breaks = 30, prob = TRUE)
ret_dens <- density(spy_returns)
lines(ret_dens$x, ret_dens$y, lwd = 2, col = "red")
ret_mean <- mean(spy_returns); ret_sd <- sd(spy_returns)
ret_norm_dens <- dnorm(ret_dens$x, mean = ret_mean, sd = ret_sd)
lines(ret_dens$x, ret_norm_dens, col = "blue", lwd = 2)
hist(spy_returns, breaks = 30, probability =  = TRUE)
hist(spy_returns, breaks = 30, probability =  = TRUE)
hist(spy_returns, breaks = 30, probability = TRUE)
hist(spy_returns, breaks = 30)
, probability = TRUE
?hist
hist(spy_returns, breaks = 30, density = TRUE)
ret_dens <- density(spy_returns)
lines(ret_dens$x, ret_dens$y, lwd = 2, col = "red")
ret_mean <- mean(spy_returns); ret_sd <- sd(spy_returns)
hist(spy_returns, breaks = 30, probability = TRUE)
ret_dens <- density(spy_returns)
lines(ret_dens$x, ret_dens$y, lwd = 2, col = "red")
hist(spy_returns, breaks = 30)
ret_dens <- density(spy_returns)
lines(ret_dens$x, ret_dens$y, lwd = 2, col = "red")
, probability = TRUE
hist(spy_returns, breaks = 30, probability = TRUE)
ret_dens <- density(spy_returns)
lines(ret_dens$x, ret_dens$y, lwd = 2, col = "red")
ret_mean <- mean(spy_returns); ret_sd <- sd(spy_returns)
ret_norm_dens <- dnorm(ret_dens$x, mean = ret_mean, sd = ret_sd)
lines(ret_dens$x, ret_norm_dens, col = "blue", lwd = 2)
ret_t3_dens_01 <- dt(ret_dens$x, df= 3 )
ret_t3_dens <- ret_t3_dens_01*ret_sd + ret_mean
ret_t3_dens <- ret_t3_dens_01*ret_sd + ret_mean
legend("topright", c("density", "normal approx"), lwd = c(1,1), col = c("red", "blue"))
legend("topright", c("density", "normal approx"), lwd = c(2,2), col = c("red", "blue"))
plot(spy_returns)
binds <- ret_mean + c(ret_sd, -ret_sd)
abline(h = bind, lty = c(3,3), col = c("green", "red"))
abline(h = binds, lty = c(3,3), col = c("green", "red"))
abline(h = binds, lty = c(3,3), col = c("green", "red"), lwd = 3)
high_violations <- length(which(spy_returns > binds[1]))
low_violations <- length(which(spy_returns < binds[2]))
high_violations_x <- which(spy_returns > binds[1])
?points()
points(high_violations_x, spy_returns[high_violations_x])
points(high_violations_x, spy_returns[high_violations_x], col = "red", lty = 4, lwd = 5)
?points
head(spy_returns[high_violations_x])
points(high_violations_x, spy_returns[high_violations_x], col = "red", lty = 4, lwd = 5)
points(high_violations_x, spy_returns[high_violations_x], col = "red", lty = 4, lwd = 5)
low_violations <- length(which(spy_returns < binds[2]))
low_violations_x <- which(spy_returns < binds[2])
points(high_violations_x, spy_returns[high_violations_x], col = "red", pch = 4, lwd = 5)
points(high_violations_x, spy_returns[high_violations_x], col = "red", pch = 0, lwd = 10)
points(high_violations_x, spy_returns[high_violations_x], col = "red", pch = 0, lwd = 10, cex = 2.5)
pchShow()
points(high_violations_x, spy_returns[high_violations_x], bg = "red", pch = 0, lwd = 10, cex = 2.5)
abline(h = c(ret_mean,binds), lty = 3, col = c("blue" ,"green", "red"), lwd = 3)
abline(h = c(ret_mean,binds), lty = c(1,3,3), col = c("blue" ,"green", "red"), lwd = 3)
legend("topright", c("Std High", "Mean", "Std Low"), lty = c(3,1,3),
col = c("blue" ,"green", "red"), lwd = 3)
legend("topright", c("Std High", "Mean", "Std Low"), lty = c(3,1,3),
col = c("green" ,"blue", "red"), lwd = 3)
hist(spy_returns, breaks = 30)
hist(spy_returns, breaks = 30, probability = TRUE)
plot(spy_returns)
for (i in 1:5:30){print i}
for (i in 1:5:30):{print i}
for (i in 5:30:5){print i}
for (i in 5:30:5){print(i)}
for (i in 5:5:30){print(i)}
for (i in 1:5:20){print(i)}
for (i in seq(5,20,5)){print(i)}
numb_returns/5
numb_roll_obs <- numb_returns/5
numb_roll_obs <- as.integer(numb_returns/5)
rolling_stats <- data.frame(matrix(nrow = numb_roll_obs, ncol = 2))
rolling_stats$Mean <- mean(spy_returns[i:(1+5)])
mean(spy_returns[i:(1+5)])
for(i in seq(2, numb_returns,5){
rolling_stats$Mean <- mean(spy_returns[i:(1+5)])
rolling_stats$Sd <- sd(spy_returns[i:(1+5)])
}
for(i in seq(2, numb_returns,5)){
rolling_stats$Mean <- mean(spy_returns[i:(1+5)])
rolling_stats$Sd <- sd(spy_returns[i:(1+5)])
}
head(spy_returns)
# Rolling mean, sd
for(i in seq(2, numb_returns,5)){
rolling_stats$Mean <- mean(spy_returns[i:(1+5)])
rolling_stats$Sd <- sd(spy_returns[1,i:(1+5)])
}
install.packages("mxnet")
install.packages("drat")
drat::addRepo("dmlc")
install.packages("mxnet")
library(mxnet)
install.packages("mxnet")
drat::addRepo("dmlc")
install.packages("mxnet")
x = seq(-10,10)
x_sq <- x^2
x_abs <- abs(x)
plot(x, x_sq)
lines(x, x_abs)
setwd("C:/Users/board/Desktop/Kaggle/NBA_Project")
library(moments)
library(Quandl)
library(lubridate)
library(pls)
set.seed(2)
data <- read.csv("Curry2015-2016stats_clean2.csv")
data$Date <- as.Date(data$Date)
data$SecondsPlayed <- hms(data$MP)
data$SecondsPlayed <- 60*hour(data$SecondsPlayed) + minute(data$SecondsPlayed)
data$MP <- NULL
sum(is.na(data))
data$FT.[is.na(data$FT.)] = mean(data$FT., na.rm=TRUE)
head(data)
tail(data)
pairs(data)
colClasses1 <- c("Date", "numeric", "numeric", "numeric", "numeric", "numeric", "numeric")
UA_in_sample <- read.csv("UA.csv", colClasses = colClasses1, na.strings = 'null')
summary(UA_in_sample)
head(UA_in_sample)
numb_returns <- dim(UA_in_sample)[1]
tail(UA_in_sample)
head(UA_in_sample)
numb_returns <- dim(UA_in_sample)[1]
UA_in_sample$return <- NA
for(i in 2:numb_returns){
UA_in_sample$return[i] <- (UA_in_sample$Open[i]-UA_in_sample$Close[i-1])/UA_in_sample$Open[i]
}
UA_in_sample$log_return <- log1p(UA_in_sample$return)
UA_in_sample <- UA_in_sample[complete.cases(UA_in_sample), ]
dim(UA_in_sample)
summary(UA_in_sample)
head(UA_in_sample)
tail(UA_in_sample)
plot(UA_in_sample$Date, UA_in_sample$log_return)
UA_gains <- cumsum(UA_in_sample$log_return)
plot(UA_in_sample$Date, UA_gains)
plot(UA_in_sample$Date, UA_gains, type = "l")
plot(UA_in_sample$Date, UA_gains, type = "l", lwd = 3)
plot(UA_in_sample$Date, UA_in_sample$log_return)
hist(UA_in_sample$log_return)
hist(UA_in_sample$log_return, breaks = 10)
hist(UA_in_sample$log_return, breaks = 30)
extreme_high <- which(UA_in_sample$log_return == max(UA_in_sample$log_return))
extreme_high <- which(UA_in_sample$log_return == max(UA_in_sample$log_return))
extreme_low <- which(UA_in_sample$log_return == min(UA_in_sample$log_return))
UA_in_sample[extreme_high, ]
UA_in_sample[extreme_low, ]
similar_dates <- as.Date(UA_in_sample$Date[UA_in_sample$Date %in% data$Date],format = '%m-%d-%Y')
numb_dates_in_both <- length(similar_dates)
(numb_dates_in_both <- length(similar_dates))
data1 <- data[data$Date %in% UA_in_sample$Date ,]
data1$UA_LogReturns <- UA_in_sample$log_return[UA_in_sample$Date %in% data$Date]
data1$Date <- NULL
head(data1)
tail(data1)
fit1 <- lm(UA_LogReturns ~., data= data1)
summary(fit1)
plot(fit1)
prince <- prcomp(data1, center = TRUE, scale = TRUE)
summary(prince)
plot(prince)
pcr.fit <- pcr(UA_LogReturns ~., data =data1,scale = TRUE, validation = "CV")
summary(pcr.fit)
validationplot(pcr.fit, val.type = "MSEP")
library(glmnet)
?glm
fit2 <- glm(UA_LogReturns ~., data = data1, family = "bernoulli")
fit2 <- glm(UA_LogReturns ~., data = data1, family = "binomial")
summary(fit1)
linear_predictions <- predict(object = fit1, data1)
linear_predictions <- predict(object = fit1, data1)
linear_predictions <- predict(fit1, data1)
quantile(linear_predictions)
